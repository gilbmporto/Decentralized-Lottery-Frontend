import React, { useEffect, useState } from "react"
import { useWeb3Contract } from "react-moralis"
import { abi, contractAddresses } from "../constants"
import { useMoralis, useWeb3ExecuteFunction } from "react-moralis"
import { useNotification } from "web3uikit"
import { ethers } from "ethers"

function LotteryEntrance() {

  const [entranceFee, setEntranceFee] = useState("0")
  const [numPlayers, setNumPlayers] = useState("0")
  const [recentWinner, setRecentWinner] = useState("")
  const [contractBalance, setContractBalance] = useState("0")
  const [ethPriceInUsd, setEthPriceInUsd] = useState("0")

  const dispatch = useNotification()

  const { chainId: chainIdHex, isWeb3Enabled } = useMoralis()
  const chainId = parseInt(chainIdHex)
  const raffleAddress = chainId in contractAddresses ? contractAddresses[chainId][2] : null

  const { runContractFunction: enterRaffle, isFetching, isLoading } = useWeb3Contract({
    abi: abi,
    contractAddress: raffleAddress,
    functionName: "enterRaffle",
    params: {},
    msgValue: entranceFee
  })

  const { runContractFunction: getEntranceFee } = useWeb3Contract({
    abi: abi,
    contractAddress: raffleAddress,
    functionName: "getEntranceFee",
    params: {},
  })

  const { runContractFunction: getNumberOfPlayers } = useWeb3Contract({
    abi: abi,
    contractAddress: raffleAddress,
    functionName: "getNumberOfPlayers",
    params: {},
  })

  const { runContractFunction: getRecentWinner } = useWeb3Contract({
    abi: abi,
    contractAddress: raffleAddress,
    functionName: "getRecentWinner",
    params: {},
  })

  const { runContractFunction: getLatestPrice } = useWeb3Contract({
    abi: abi,
    contractAddress: raffleAddress,
    functionName: "getLatestPrice",
    params: {},
  })

  useEffect(() => {
    if (isWeb3Enabled) {
      updateUI()
      if (typeof window !== undefined) {
        getContractBalance()
      }
    }
  }, [isWeb3Enabled, numPlayers])

  async function getContractBalance() {
    if (typeof window !== "undefined") {
      const provider = new ethers.providers.Web3Provider(window.ethereum)
      const contractBal = await provider.getBalance(raffleAddress)
      setContractBalance((contractBal / 1e18).toString())
    }
    
  }

  async function updateUI() {
    const actualEntranceFee = (await getEntranceFee()).toString()
    const actualNumberOfPlayers = (await getNumberOfPlayers()).toString()
    const actualRecentWinner = (await getRecentWinner()).toString()
    const latestEthUsdPrice = ((await getLatestPrice()) / 1e9).toFixed(2).toString()
    setEntranceFee(actualEntranceFee)
    setNumPlayers(actualNumberOfPlayers)
    setRecentWinner(actualRecentWinner)
    setEthPriceInUsd(latestEthUsdPrice)
  }

  const handleClick = async () => {
    await enterRaffle({
      onSuccess: handleSuccess,
      onComplete: handleWaiting,
      onError: (error) => {
        if (error) {
          if (error.message.length < 100) {
            alert(error.message)
          } else {
            alert("You already entered the Raffle!")
          }
          console.log(error.message.length)
        }
        console.log(error)},
    })
  }

  const handleSuccess = async (tx) => {
    await tx.wait(1)
    await handleNewNotification(tx)
    updateUI()
  }

  const handleWaiting = async () => {
    dispatch({
      type: "info",
      message: "Waiting...",
      title: "Tx Notification",
      position: "topR",
    })
  }

  const handleNewNotification = async (tx) => {
    dispatch({
      type: "info",
      message: "Transaction successfully completed!",
      title: "Tx Notification",
      position: "topR",
    })

  }

  return (
    <div>
      {raffleAddress ? (
        <div className="flex flex-col justify-center align-middle content-center items-center mt-3 mx-2">
          <p className="my-2">Welcome to a truly decentralized and fraud-proof lottery!</p>
          <p className="my-2">The rules are simple:</p>
          <p className="my-2">1) The raffle happens once every 2 days;</p>
          <p className="my-2">2) A random number is generated by the ChainlinkVRF service</p>
          <p className="my-2">3) Exactly after 2 days, if there is at least one address in the raffle and if there is at least 0,1 ETH inside, the raffle happens.</p>
          <p className="my-2"><b>One address will always win</b> and, then, the lottery is reseted.</p>
          <p></p>
          <button 
            onClick={handleClick} 
            className='bg-blue-700 text-white p-3 rounded-md mt-5 mb-2 hover:bg-blue-900 w-[150px]'
            disabled={isLoading || isFetching}
          >
            {isLoading || isFetching ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              <div>Enter Raffle</div>
            )}
          </button>
          <p className="my-2">Raffle Address: <span className="font-bold">{raffleAddress}</span></p>
          <p className="my-2">Entrance fee: <span className="text-lg font-bold">{entranceFee / 1e18} ETH</span></p>
          <p className="my-2">Actual number of players: <span className="text-lg font-bold">{numPlayers}</span></p>
          <p className="my-2">Recent winner: <span className="text-lg font-bold">{recentWinner}</span></p>
          <p className="my-2">Total Raffle balance: <span className="text-lg font-bold text-green-500">{contractBalance} ETH</span></p>
          <p className="my-2">0,1 ETH Price in USD: <span className="text-lg font-bold text-green-500">{ethPriceInUsd} USD</span></p>
          <p className="my-2">Total prize in USD: <span className="text-lg font-bold text-green-500">{ethPriceInUsd * numPlayers} USD</span></p>
        </div>
      ) : (
        <div className="mt-2 mb-2">You must connect your wallet and connect into goerli network to enter the raffle!</div>
      )}
      
    </div>
  )
}

export default LotteryEntrance
